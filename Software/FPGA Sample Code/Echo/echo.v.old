module echo #(
	parameter BITSIZE = 24
)(	
	// Parallel audio interface
	input wire bclk,
	input wire lrclk,

	input wire [BITSIZE-1:0] left_in,
	input wire [BITSIZE-1:0] right_in,

	output reg [BITSIZE-1:0] left_out,
	output reg [BITSIZE-1:0] right_out,
);
localparam N = 7;
localparam NPOS = 2**N;

reg [N-1:0] rd_ptr = 0;
reg [N-1:0] wr_ptr = NPOS/2;
// reg [BITSIZE-1:0] mem [0:NPOS-1];


localparam ADDRLEN = 14;
localparam DATALEN = 16;

wire wren;
reg [ADDRLEN-1:0] memaddr;
reg [DATALEN-1:0] datain;
reg [DATALEN-1:0] dataout;

SB_SPRAM256KA M1 (
    .ADDRESS(memaddr),
    .DATAIN(datain),
    .MASKWREN(4'b1111),
    .WREN(wren),
    .CHIPSELECT(1'b1),
    .CLOCK(bclk),
    .STANDBY(1'b0),
    .SLEEP(1'b0),
    .POWEROFF(1'b0),
    .DATAOUT(dataout)
  );

always @(posedge lrclk) begin
	left_out <= left_in;
	machinestate <= 2'b01;

	// mem[wr_ptr] <= right_in;
	// wr_ptr <= ((wr_ptr + 1) % NPOS);

	// right_out <= (mem[rd_ptr]/2) + (right_in/2);
	// rd_ptr <= ((rd_ptr + 1) % NPOS);
end

always @(posedge bclk) begin
	case (machinestate)
		2'b01: begin
			wren <= 1;
			memaddr <= wr_ptr;
			datain <= right_in;
			machinestate <= 2'b10;
		end
		2'b10: begin
			memwen <= 0;
			memaddr <= rd_ptr;
			machinestate <= 2'b11;
		end
		2'b11: begin
			right_out <= right_in + dataout;
			wr_ptr <= ((wr_ptr + 1) % NPOS);
			rd_ptr <= ((rd_ptr + 1) % NPOS);
			machinestate <= 2'b00;
		end
	endcase
end

endmodule